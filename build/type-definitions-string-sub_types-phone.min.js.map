{"version":3,"sources":["webpack://[name]/./src/scripts/modules/types/definitions/string/string.js","webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/phone.js","webpack://[name]/./src/scripts/modules/types/definitions/cleave/index.js"],"names":["StringType","config","_this","_classCallCheck","this","_getPrototypeOf","call","_objectSpread","cleave","numeral","stripLeadingZeroes","_defineProperty","_assertThisInitialized","props","_props$schema","schema","id","key","value","mode","matchType","keyType","parent","error","Item","type","showLabel","keyEdit","Array","isArray","getActions","CleaveType","newType","settings","PhoneType","_possibleConstructorReturn","Boolean","test","replace","getCleaveEl","Editor","component","getElementsByClassName","Values","CLEAVE_CLS","e","element","console","warn","update","target","rawValue","getAttribute","DATA_SCHEMA_KEY","original","classList","contains","NUMBER_CLS","numVal","Number","isNaN","undefined","expandOnChange","setWidth","userEvents","onChange","updated","domNode","cleaveOpts","onValueChanged","onCleaveChange","clearCleave","Cleave","setRawValue","from","getElementsByTagName","map","input","checkCleave","oninput","rmOpts","arguments","length","destroy","clearObj","Schema","MODES","EDIT","buildEvents","instance","_objectWithoutProperties","BaseType"],"mappings":"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","file":"type-definitions-string-sub_types-phone.min.js","sourcesContent":["import CleaveType from '../cleave'\nimport { Item } from '../../components'\nimport { Values, Schema } from 'jTConstants'\n\nclass StringType extends CleaveType {\n\n  static priority = 1\n  static eval = (value) => (typeof value === 'string')\n  static defaultValue = (newType, schema, settings) => ''\n  \n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: false,\n        stripLeadingZeroes: false,\n        ...(config && config.cleave || {}),\n      }\n    })\n  }\n\n  render = props => {\n    const { schema: { id, key, value, mode, matchType, keyType, parent, error } } = props\n    return Item({\n      id,\n      key,\n      value,\n      mode,\n      error,\n      type: matchType,\n      showLabel: true,\n      keyEdit: !parent || !Array.isArray(parent.value),\n      keyType: keyType || 'text',\n      ...this.getActions(mode)\n    })\n  }\n\n}\n\nexport default StringType","import StringType from '../string'\n\nclass PhoneType extends StringType {\n\n  static priority = 2\n  static defaultValue = ''\n  static allowEmptyValue = ''\n  static eval = value => {\n    if (!value || typeof value !== 'string') return false\n    const regex = /^[2-9]\\d{2}[2-9]\\d{2}\\d{4}$/\n    return Boolean(regex.test(value.replace(/\\D/g, '')))\n  }\n\n  constructor(config){\n    super(config)\n  }\n\n\n}\n\nexport default PhoneType","import BaseType from '../base'\nimport Cleave from 'cleave.js'\nimport { clearObj } from 'jTUtils'\nimport { Values, Schema } from 'jTConstants'\n\nconst getCleaveEl = (Editor, id) => {\n  const schema = Editor.schema(id)\n  return schema &&\n    schema.component &&\n    schema.component.getElementsByClassName(Values.CLEAVE_CLS)[0]\n}\n\nclass CleaveType extends BaseType {\n\n  constructor(config){\n    super(config)\n    this.cleaveOpts = {\n      onValueChanged: this.onCleaveChange,\n      ...config.cleave,\n    }\n  }\n  \n  onCleaveChange = (e, Editor) => {\n    // Sometimes this method gets called before the cleave is initialized\n    // So if no cleave, but return \n    if(!this.cleave) return\n    // If there is no cleave element, then just return\n    // this method should never have been called\n    if(!this.cleave.element)\n      return console.warn(`Called onCleaveChange but no cleave element exists`, this)\n\n    const update = {\n      value: e.target.rawValue,\n      key: this.cleave.element.getAttribute(Values.DATA_SCHEMA_KEY),\n      original: this.original.value\n    }\n\n    // Check if the input should be a number\n    if(this.cleave.element.classList.contains(Values.NUMBER_CLS)){\n      const numVal = Number(update.value)\n      // If it's a valid number use that instead\n      !isNaN(numVal) && (update.value = numVal)\n    }\n\n    // Ensure we have a valid key and value, and there was an update\n    if(\n      (update.value === undefined || update.key === undefined) ||\n      (this.original[update.key] && this.original[update.key] === update.value)\n    ) return\n\n    this.config.expandOnChange !== false &&\n      this.setWidth(getCleaveEl(Editor, this.original.id))\n\n    return this.original.value !== update.value &&\n      this.userEvents.onChange(e, update, this.original.id, Editor) !== false &&\n      (this.updated.value = update.value)\n  }\n\n  checkCleave = (schema, domNode) => {\n    if(domNode.classList && domNode.classList.contains(Values.CLEAVE_CLS)){\n      // Set the onValueChanged cb here, so we get access to the injected Editor\n      this.cleaveOpts.onValueChanged = this.onCleaveChange\n      // If a cleave instance already exists, clear it out\n      this.cleave && this.clearCleave()\n      // Create a new cleave instance, with the current domNode\n      this.cleave = new Cleave(domNode, this.cleaveOpts)\n      // Set the initial cleave value\n      this.cleave.setRawValue(schema.value)\n      return true\n    }\n  }\n  \n  buildEvents = (schema, domNode) => (\n    domNode && Array\n      .from(domNode.getElementsByTagName('input'))\n      .map(input => {\n        // Checks if it has the cleave class\n        // Catches changes for the key input\n        !this.cleave && this.checkCleave(schema, input)\n          ? (domNode.oninput = undefined)\n          : (domNode.oninput = this.onChange)\n\n        this.config.expandOnChange !== false && this.setWidth(input)\n      })\n  )\n\n  clearCleave = (rmOpts=true) => {\n    if(!this.cleave) return\n    this.cleave.destroy()\n    this.cleave = undefined\n    rmOpts && clearObj(this.cleaveOpts)\n  }\n\n  componentDidUpdate = (props, Editor) => {\n    const { schema } = props\n    // If not in edit mode, clear out cleave\n    if(schema.mode !== Schema.MODES.EDIT) this.clearCleave(false)\n    // If in edit mode, and no cleave, add the cleave to the component\n    else if(!this.cleave) this.buildEvents(schema, schema.component)\n    // Else update the cleave to the current raw value\n    else this.cleave.setRawValue(schema.value)\n    \n    const { parent, instance, component, ...original } = schema\n    // Update original with current schema\n    this.original = original\n    // Clear out the updated, because we just updated\n    this.updated && clearObj(this.updated)\n  }\n  \n  componentWillUnmount = (Editor) => {\n    // Set to undefined, because when the instance gets remove, we don't want it \n    // to remove the value; it's a ref to the actual value in the tree\n    this.original.value = undefined\n    this.clearCleave()\n  }\n\n}\n\nexport default CleaveType"],"sourceRoot":""}