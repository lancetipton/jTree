((typeof self !== 'undefined' ? self : this)["webpackJsonp_name_"] = (typeof self !== 'undefined' ? self : this)["webpackJsonp_name_"] || []).push([["render-js-store"],{

/***/ "./src/scripts/modules/renders/js/actions.js":
/*!***************************************************!*\
  !*** ./src/scripts/modules/renders/js/actions.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var actions = ['ADD_DATA', 'UPDATE_ITEM', 'UPDATE_SELECTED', 'UPDATE_EXPANDED', 'UPDATE_EDIT'].reduce(function (actions, action) {
  return (actions[action.toUpperCase()] = action.toUpperCase()) && actions;
}, {});
/* harmony default export */ __webpack_exports__["default"] = (actions);

/***/ }),

/***/ "./src/scripts/modules/renders/js/dispatcher.js":
/*!******************************************************!*\
  !*** ./src/scripts/modules/renders/js/dispatcher.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.clonedeep */ "./node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__);
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


var WATCHERS = {};
var ON_DISPATCH;
var STATE;

var isFunc = function isFunc(test) {
  return typeof test === 'function';
};

var destroy = function destroy() {
  return Object.entries(WATCHERS).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        id = _ref2[0],
        cbs = _ref2[1];

    cbs && cbs.map(function (cb) {
      return cb && typeof cb.destroy === 'function' && cb.destroy(id);
    });
    WATCHERS[watcher] = undefined;
    delete WATCHERS[watcher];
  });
};

var dispatch = function dispatch(id) {
  if (!ON_DISPATCH) return console.warn("You must create a store before you can dispatch to it");

  for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    payload[_key - 1] = arguments[_key];
  }

  return update(ON_DISPATCH.apply(void 0, [STATE, id].concat(payload)), id);
};

var create = function create(onDispatch, state) {
  if (ON_DISPATCH || STATE) return console.warn("dispatcher.create should only be call once for an application");
  if (!onDispatch || !isFunc(onDispatch)) return console.warn("dispatcher.create requires an 'onDispatch' method");
  if (!state || (typeof store === "undefined" ? "undefined" : _typeof(store)) !== 'object') return console.warn("create requires an initial state of type 'object'");
  ON_DISPATCH = onDispatch;
  STATE = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default()(state);
  return STATE;
};
/**
 * Checks the state for an update, and updates when needed
 * Calls all cbs linked to the passed in id
 * @param  {any} updatedState - new changes
 * @param  {any} id - used to find the linked callbacks
 * @param  {any} key - used to find the location of the state that was updated
 * @return { void }
 */


var update = function update(updatedState, id) {
  // If no updated state, or the current state is equal to the update state
  // No update, so just return
  if (!updatedState || STATE === updatedState) return STATE; // Otherwise update the state with the updateState param

  STATE = _objectSpread({}, STATE, updatedState);
  var cbs = WATCHERS[id];
  cbs && cbs.length && cbs.map(function (cb) {
    return typeof cb === 'function' && cb(STATE);
  });
  return STATE;
};

var watch = function watch(id, cb) {
  if (!cb || typeof cb !== "function") console.warn("You must pass a function as the second argument to store.listen()");
  WATCHERS[id] = WATCHERS[id] || [];
  WATCHERS[id].push(cb);
};

var getWatchers = function getWatchers() {
  return WATCHERS;
};

var forget = function forget(id, cb) {
  if (!id || !WATCHERS[id]) console.warn("You must pass and id to forget a watcher");
  var cbIndex = WATCHERS[id].indexOf(cb);
  cbIndex !== -1 && WATCHERS[id].splice(cbIndex, 1);
};

var dispatcher = {
  create: create,
  destroy: destroy,
  dispatch: dispatch,
  forget: forget,
  getWatchers: getWatchers,
  watch: watch,
  update: update
};
/* harmony default export */ __webpack_exports__["default"] = (dispatcher);

/***/ }),

/***/ "./src/scripts/modules/renders/js/store.js":
/*!*************************************************!*\
  !*** ./src/scripts/modules/renders/js/store.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dispatcher */ "./src/scripts/modules/renders/js/dispatcher.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions */ "./src/scripts/modules/renders/js/actions.js");
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var dispatch = _dispatcher__WEBPACK_IMPORTED_MODULE_0__["default"].dispatch,
    watch = _dispatcher__WEBPACK_IMPORTED_MODULE_0__["default"].watch,
    forget = _dispatcher__WEBPACK_IMPORTED_MODULE_0__["default"].forget,
    create = _dispatcher__WEBPACK_IMPORTED_MODULE_0__["default"].create; // this is used to define if an item should be re-rendered
// it should contain anything that can be changed by a user

var serialItem = function serialItem(item) {
  return [!!item.visible, !!item.expanded, !!item.selected, !!item.edit].join("");
};

var initialState = {
  data: [],
  selected: null,
  childrenCache: {},
  itemCache: {},
  isModalVisible: false
};

var getItem = function getItem(idOrItem, state) {
  return typeof idOrItem === "string" ? state.itemCache[idOrItem] : idOrItem;
};

var getParent = function getParent(item, state) {
  if (item.parentItem) return item.parentItem;
  if (!item.parentId) return null;
  item.parentItem = getItem(item.parentId, state);
  return item.parentItem;
};

var getChildrenOf = function getChildrenOf(id, state) {
  if (id in state.childrenCache) return state.childrenCache[id];
  children = state.data.filter(function (item) {
    return item.parentId === id;
  });
  return children && children.length ? children : false;
};

var updateItemCache = function updateItemCache(itemCache, item) {
  return _objectSpread({}, itemCache, _defineProperty({}, item.id, _objectSpread({}, itemCache[item.id], item)));
};

var onDispatch = function onDispatch(state) {
  for (var _len = arguments.length, action = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    action[_key - 1] = arguments[_key];
  }

  var type = action.type,
      payload = _objectWithoutProperties(action, ["type"]);

  if (!type || !Object.keys(payload).length) return state;

  switch (type) {
    case _actions__WEBPACK_IMPORTED_MODULE_1__["default"].ADD_DATA:
      {
        // newData === Array
        return !payload.newData ? state : _objectSpread({}, state, {
          data: updated.data.concat(payload.newData),
          itemCache: payload.newData.reduce(function (itemCache, item) {
            return (itemCache[item.id] = item) && itemCache;
          }, updated.itemCache)
        });
      }

    case _actions__WEBPACK_IMPORTED_MODULE_1__["default"].UPDATE_ITEM:
      {
        if (!payload || !payload.id) return state;
        var item = getItem(payload.id, state); // If no update, or the item has not been update, just return

        return !item || serialItem(item) === serialItem(payload) ? state : _objectSpread({}, state, {
          itemCache: updateItemCache(state.itemCache, payload)
        });
      }

    case _actions__WEBPACK_IMPORTED_MODULE_1__["default"].UPDATE_SELECTED:
      {
        var _updated = _objectSpread({}, state, {
          selected: null // Remove current selected

        });

        if (state.selected) {
          var curId = state.selected.id;
          _updated.itemCache = updateItemCache(_updated.itemCache, _objectSpread({}, _updated.itemCache[curId], {
            selected: false
          }));
        } // Get the item to update


        var _item = getItem(payload.id, state); // if no item to update reutrn


        if (!_item) return _updated; // Update the passed in item to selected

        _updated.itemCache = updateItemCache(_updated.itemCache, _objectSpread({}, _item, {
          selected: true
        }));
        _updated.selected = _item; // return updated state

        return _updated;
      }

    case _actions__WEBPACK_IMPORTED_MODULE_1__["default"].UPDATE_EXPANDED:
      {
        var _children = getChildrenOf(payload.id, state);

        var _item2 = getItem(payload.id, state);

        return !_item2 ? state : _objectSpread({}, state, {
          itemCache: updateItemCache(updated.itemCache, _objectSpread({}, _item2, {
            expanded: payload.expanded
          })),
          childrenCache: _objectSpread({}, state.childrenCache, _defineProperty({}, _item2.id, _children && _children.map(function (child) {
            return (child.visible = payload.expanded) && child;
          }) || undefined))
        });
      }

    case _actions__WEBPACK_IMPORTED_MODULE_1__["default"].UPDATE_EDIT:
      {
        var _children2 = getChildrenOf(payload.id, state);

        var _item3 = getItem(payload.id, state);

        return !_item3 ? state : _objectSpread({}, state, {
          itemCache: updateItemCache(updated.itemCache, _objectSpread({}, _item3, {
            edit: payload.edit
          }))
        });
      }
  }
};

/* harmony default export */ __webpack_exports__["default"] = (function (startState) {
  return create(onDispatch, _objectSpread({}, initialState, startState));
});

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,