{"version":3,"sources":["webpack://[name]/./src/scripts/modules/types/components/sub/label.js","webpack://[name]/./src/scripts/modules/types/components/sub/input.js"],"names":["__webpack_require__","r","__webpack_exports__","d","label","element_r__WEBPACK_IMPORTED_MODULE_0__","name","value","elements","className","concat","toLowerCase","for","getValue","val","text","toString","inputWrapper","props","children","type","showLabel","classes","attrs","_objectWithoutProperties","div","_objectSpread","capitalize","input","keyVal","key","keyText","elValue","valueText","_defineProperty","El","isEdit","editCls","Values","EDIT_CLS","elVal","_ref","_ref2","cleave","CLEAVE_CLS","isNumber","NUMBER_CLS","class","keyType","DATA_SCHEMA_KEY","disabled","valueType","getAttrs"],"mappings":"qKAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,IAEaI,EAAQ,SAACE,EAAMC,GAAP,OACnBA,GACEC,WAASJ,MACP,CAAEK,UAAS,mBAAAC,OAAqBH,EAAMI,cAA3B,UAAkDC,IAAKN,GAClEC,yoBCDN,IAAMM,EAAW,SAACC,EAAKC,GACrB,OAAOA,IAEFD,GAAe,IAARA,GAAqB,KAARA,GAClBA,EAAM,IAAIE,WACX,KAyCKC,EAAe,SAACC,EAAOC,GAAa,IACzCC,EAAuCF,EAAvCE,KAAMC,EAAiCH,EAAjCG,UAAWC,EAAsBJ,EAAtBI,QAAYC,EADYC,EACFN,EADE,gCAK/C,OAHAI,EAAUA,GAAO,GAAAZ,OAAOY,EAAP,uBAAsC,oBACpDF,IAAME,GAAO,SAAAZ,OAAaU,EAAb,aAETZ,WAASiB,sUAATC,CAAA,GACAH,EADA,CACOd,UAAWa,IACvBD,GAAajB,gBAAMgB,EAAMO,YAAWP,IACpCD,IAiBSS,EAAQ,SAACV,EAAOE,GAE3B,IAAMS,EAAkB,QAATT,GAAkBP,EAASK,EAAMY,IAAKZ,EAAMa,SACrDC,EAAmB,UAATZ,GAAoBP,EAASK,EAAMX,MAAOW,EAAMe,WAEhE,OAAAC,EAAA,CACEL,SACAG,UACAG,GAAI3B,WAASoB,MACbQ,QAAQ,EACRf,UAAWH,EAAMG,UACjBgB,QAASC,IAAOC,UANlB,GAAA7B,OAOMU,EAPN,SA7De,SAACF,EAAOE,EAAMS,EAAQW,GAAU,IAAAC,EAAAC,EAC3CpB,EAAO,aAAAZ,OAAgB4B,IAAOC,UAIlC,MAHS,QAATnB,GAAkBF,EAAMyB,SAAWrB,GAAO,IAAAZ,OAAQ4B,IAAOM,aACzD1B,EAAM2B,WAAavB,GAAO,IAAAZ,OAAQ4B,IAAOQ,aAEzB,QAAT1B,GAAAc,EAAAO,EAAA,CAEHM,MAAOzB,EACPF,KAAMF,EAAM8B,SAAW,OACvBzC,MAAOsB,GACNS,IAAOW,gBAAkB7B,GALvBc,EAAAO,EAAA,cAAA/B,OAMUQ,EAAMY,MANhBI,EAAAO,EAAA,WAOOvB,EAAMgC,UAPbT,IAAAP,EAAAQ,EAAA,CAUHK,MAAOzB,EACPF,KAAMF,EAAMiC,WAAa,QACxBb,IAAOW,gBAAkB7B,GAZvBc,EAAAQ,EAAA,gBAAAhC,OAaYQ,EAAMY,MAblBI,EAAAQ,EAAA,QAcIF,GAdJN,EAAAQ,EAAA,WAeOxB,EAAMgC,UAfbR,GA+DaU,CAASlC,EAAOE,EAAMS,EAAQG","file":"type-components-sub-input.min.js","sourcesContent":["import { elements } from 'element-r'\n\nexport const label = (name, value) => (\n  value &&\n    elements.label(\n      { className: `item-label item-${value.toLowerCase()}-label`, for: name },\n      value\n    )\n)","import { Values } from 'jTConstants'\nimport { elements } from 'element-r'\nimport { label } from './label'\nimport { capitalize } from 'jTUtils'\n\nconst getValue = (val, text) => {\n  return text\n    ? text\n    : (val || val === 0 || val === '')\n      ? (val + '').toString()\n      : ''\n}\n\n/**\n * Gets the attributes for the input element, based on the passed in type\n * @param  { object } props - data passed in from TypeClass instance\n * @param  { string } type - which property the input is being built for ( key || value )\n * \n * @return { dom node }\n */\nconst getAttrs = (props, type, keyVal, elVal) => {\n  let classes = `item-data ${Values.EDIT_CLS}`\n  type !== 'key' && props.cleave && (classes += ` ${Values.CLEAVE_CLS}`)\n  props.isNumber && (classes += ` ${Values.NUMBER_CLS}`)\n  \n  return type === 'key'\n    ? {\n      class: classes,\n      type: props.keyType || 'text',\n      value: keyVal,\n      [Values.DATA_SCHEMA_KEY]: type,\n      name: `key-${props.key}`,\n      disabled: props.disabled,\n    }\n    : {\n      class: classes,\n      type: props.valueType || 'text',\n      [Values.DATA_SCHEMA_KEY]: type,\n      name: `value-${props.key}`,\n      value: elVal,\n      disabled: props.disabled,\n    }\n}\n\n/**\n * Wraps an input element to help with styling and placement ( i.e. position: relative )\n * @param  { object } props - attributes for the wrapper and type of data being wrapped\n * @param  { any } children - sub elements of the wrapper\n * \n * @return { dom node }\n */\nexport const inputWrapper = (props, children) => {\n  let { type, showLabel, classes, ...attrs } = props\n  classes = classes && `${classes} item-data-wrapper` || 'item-data-wrapper' \n  if(type) classes += ` item-${type}-wrapper`\n\n  return elements.div(\n    { ...attrs, className: classes }, \n    showLabel && label(type, capitalize(type)),\n    children\n  )\n}\n\n\n/**\n * Builds an input object based on passed in params\n * @param  { object } props - data passed in from TypeClass instance\n * @param  { object } props.showLabel - should show input label\n * @param  { object } props.value - value of the element\n * @param  { object } props.valueType - value input type if editing\n * @param  { object } props.key - key being edited\n * @param  { object } props.keyType - key input type if editing\n * @param  { string } type - which property the input is being built for ( key || value )\n * \n * @return { object } - object with properties used to create an input domNode\n */\nexport const input = (props, type) => {\n  \n  const keyVal = type === 'key' && getValue(props.key, props.keyText)\n  const elValue = type === 'value' && getValue(props.value, props.valueText)\n\n  return { \n    keyVal,\n    elValue,\n    El: elements.input,\n    isEdit: true,\n    showLabel: props.showLabel,\n    editCls: Values.EDIT_CLS,\n    [`${type}Attrs`]: getAttrs(props, type, keyVal, elValue)\n  }\n}\n"],"sourceRoot":""}