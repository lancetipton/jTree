{"version":3,"sources":["webpack://[name]/./src/scripts/modules/types/definitions/group/index.js","webpack://[name]/./src/scripts/modules/types/definitions/collection/collection.js"],"names":["getChildrenHt","refNode","Array","from","firstChild","children","reduce","height","child","scrollHeight","GroupType","config","_this","_classCallCheck","this","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","e","Editor","stopPropagation","id","currentTarget","getAttribute","Values","DATA_TREE_ID","schema","update","open","store","isOpen","component","style","maxHeight","closedMaxHt","setTimeout","currentMaxHt","toggleSpeed","props","transRule","window","getComputedStyle","transition","speed","parseFloat","split","isNaN","concat","isRoot","rootHeader","document","getElementById","JT_ROOT_HEADER_ID","getTransSpeed","setOriginal","updated","clearObj","childrenHt","mode","Schema","MODES","EDIT","updateParentHeights","parent","ADD","matchType","EMPTY","isArray","value","key","length","add","_props$schema","keyType","keyText","error","notEditMode","classes","actions","onToggle","onAdd","List","_objectSpread","styles","wrapper","type","showLabel","valueEl","keyEdit","getActions","BaseType","CollectionType","_possibleConstructorReturn","_typeof","newType","settings"],"mappings":"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","file":"type-definitions-collection-collection.min.js","sourcesContent":["import BaseType from '../base'\nimport {\n  typesOverride,\n  capitalize,\n  clearObj,\n  isObj,\n  updateParentHeights,\n} from 'jTUtils'\nimport { Schema, Values } from 'jTConstants'\nimport { List } from '../../components'\n\nconst getChildrenHt = refNode => {\n  return Array\n    .from(refNode.firstChild.children)\n    .reduce((height, child) => {\n      height+= child.scrollHeight || 0\n      return height\n    }, 0)\n}\n\nclass GroupType extends BaseType {\n\n  constructor(config){\n    super(config)\n  }\n\n  store = {}\n\n  onToggle = (e, Editor) => {\n    e.stopPropagation()\n    const id = e.currentTarget.getAttribute(Values.DATA_TREE_ID)\n    if(!id) return\n\n    const schema = Editor.schema(id)\n    // If no schema just return, cause we cant update\n    if(!schema) return\n\n    const update = { open: !schema.open }\n\n    // --- Does the opposite of the didUpdate method below --- //\n    // Check if the store is open, but the update is changing to closed\n    if(this.store.isOpen && !update.open){\n      // If true, close the object before the update is called\n      this.store.isOpen = false\n      \n      const refNode = schema.component\n      // First update the maxHeight, to `close the object`\n      refNode.style.maxHeight = this.store.closedMaxHt\n      // Use a timeout to wait until the object is closed\n      return setTimeout(() => {\n        // Then update the store, can call the update method\n        // Now the object have been closed\n        this.store.currentMaxHt = this.store.closedMaxHt\n        Editor.update(id, update)\n      }, this.toggleSpeed || 500)\n    }\n\n    Editor.update(id, update)\n  }\n  \n  getTransSpeed = refNode => {\n    refNode = refNode || props.schema.component\n\n    if(!refNode) return\n\n    const transRule = window.getComputedStyle(refNode).transition\n    if(!transRule) return\n    // Convert the transition rule speed into milliseconds\n    const speed = parseFloat(transRule.split(' ')[1]) * 1000\n    if(typeof speed !== 'number' || isNaN(speed)) return\n    this.toggleSpeed = speed\n  }\n  \n  componentDidMount = (props, Editor) => {\n    const refNode = props.schema.component\n    if(!refNode || refNode.style.maxHeight) return\n\n    // Set the currentMax height\n    this.store.currentMaxHt = `${refNode.scrollHeight}px`\n    this.store.closedMaxHt = this.store.currentMaxHt\n    refNode.style.maxHeight = this.store.currentMaxHt\n\n    // If it's the root node, it defaults to open\n    if(props.schema.isRoot && props.schema.open){\n      this.store.isOpen = true\n    // So use the header child height to set the default closed height\n      const rootHeader = document.getElementById(Values.JT_ROOT_HEADER_ID)\n      if(!rootHeader) return\n      this.store.closedMaxHt = `${rootHeader.scrollHeight}px`\n\n    }\n\n    this.getTransSpeed(refNode)\n  }\n\n  componentDidUpdate = (props, Editor) => {\n    const { schema } = props\n\n    this.setOriginal(schema)\n\n    // Clear out the updated, because the component just updated\n    this.updated && clearObj(this.updated)\n    \n    // ----- height update ----- //\n    // If no comp || not open just return\n    const refNode = schema.component\n    if(!refNode) return\n    \n    const childrenHt = getChildrenHt(refNode)\n\n    // --- Does the opposite of the toggle method above --- //\n    // Check if the schema is open, but the local store is closed\n    if(!this.store.isOpen && schema.open){\n    // If true, set the store to open, and update the maxHeight of the element\n      this.store.isOpen = true\n      this.store.currentMaxHt = `${childrenHt}px`\n      // Only set in open, so it keeps the height when about to close\n      refNode.style.maxHeight = this.store.currentMaxHt\n    }\n\n    // If the schema is open, update all the parent heights\n    // This ensures the parent height does not cut off the children\n    // when a child grows larger\n    (schema.mode === Schema.MODES.EDIT || schema.open) &&\n      updateParentHeights(schema, childrenHt)\n  }\n\n\n  onAdd = (e, Editor) => {\n    e.stopPropagation()\n\n    const id = e.currentTarget.getAttribute(Values.DATA_TREE_ID)\n    const schema = id && Editor.schema(id)\n    const update = {\n      parent: schema,\n      mode: Schema.MODES.ADD,\n      matchType: Schema.EMPTY,\n    }\n\n    if(Array.isArray(schema.value))\n      update.key = schema.value.length\n    \n    schema && Editor.add({\n      parent: schema,\n      mode: Schema.MODES.ADD,\n      matchType: Schema.EMPTY,\n    })\n  }\n\n  render = props => {\n    const {\n      schema: {\n        id, key, value, mode, matchType, keyType, keyText, isRoot, open, error\n      },\n      children,\n    } = props\n    const notEditMode = mode !== Schema.MODES.EDIT\n    const classes = open && `list-open` || ''\n    let actions = {\n      onToggle: notEditMode && this.onToggle,\n      onAdd: open && notEditMode && this.onAdd\n    }\n\n    return List({\n      id,\n      key,\n      value,\n      mode,\n      classes,\n      isRoot,\n      children,\n      keyText,\n      error,\n      keyType: keyType || 'text',\n      isOpen: open,\n      styles: {\n        // Always set the height to be the currentMax height\n        // When opened, height will be updated in componentDidUpdate\n        wrapper: { maxHeight: this.store.currentMaxHt },\n      },\n      type: matchType,\n      showLabel: true,\n      valueEl: 'select',\n      keyEdit: !props.schema.parent || !Array.isArray(props.schema.parent.value),\n      ...this.getActions(mode, actions),\n    })\n  }\n\n}\n\nexport default GroupType","import GroupType from '../group'\n\nclass CollectionType extends GroupType {\n  \n  static priority = 1\n  static eval = value => typeof value === 'object' && Array.isArray(value)\n  static defaultValue = (newType, schema, settings) => []\n\n  constructor(config){\n    super({ ...config })\n  }\n\n}\n\n\n\nexport default CollectionType"],"sourceRoot":""}