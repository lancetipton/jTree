{"version":3,"sources":["webpack://[name]/./src/scripts/modules/types/definitions/number/sub_types/index.js","webpack://[name]/./src/scripts/modules/types/definitions/number/number.js","webpack://[name]/./src/scripts/modules/types/definitions/number/sub_types/float.js","webpack://[name]/./src/scripts/modules/types/definitions/number/sub_types/money.js","webpack://[name]/./src/scripts/modules/types/definitions/number/sub_types/percent.js","webpack://[name]/./src/scripts/modules/types/definitions/cleave/index.js"],"names":["__webpack_require__","r","__webpack_exports__","_float__WEBPACK_IMPORTED_MODULE_0__","d","_money__WEBPACK_IMPORTED_MODULE_1__","_percent__WEBPACK_IMPORTED_MODULE_2__","NumberType","config","_this","_classCallCheck","this","_getPrototypeOf","call","_objectSpread","cleave","numeral","numeralThousandsGroupStyle","stripLeadingZeroes","numeralDecimalScale","_defineProperty","_assertThisInitialized","props","_props$schema","schema","id","key","value","mode","matchType","keyType","parent","error","Item","type","showLabel","isNumber","keyEdit","Array","isArray","getActions","CleaveType","newType","settings","FloatType","Number","MoneyType","delimiter","prefix","noImmediatePrefix","indexOf","PercentType","getCleaveEl","Editor","component","getElementsByClassName","Values","CLEAVE_CLS","e","element","console","warn","update","target","rawValue","getAttribute","DATA_SCHEMA_KEY","original","classList","contains","NUMBER_CLS","numVal","isNaN","undefined","expandOnChange","setWidth","userEvents","onChange","updated","domNode","cleaveOpts","onValueChanged","onCleaveChange","clearCleave","Cleave","setRawValue","from","getElementsByTagName","map","input","checkCleave","oninput","rmOpts","arguments","length","destroy","clearObj","Schema","MODES","EDIT","buildEvents","instance","_objectWithoutProperties","BaseType"],"mappings":"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","file":"type-definitions-number-sub_types.min.js","sourcesContent":["import FloatType from './float'\nimport MoneyType from './money'\nimport PercentType from './percent'\n\nexport {\n  FloatType,\n  MoneyType,\n  PercentType\n}","import CleaveType from '../cleave'\nimport { Item } from '../../components'\nimport Cleave from 'cleave.js'\nimport { clearObj } from 'jTUtils'\nimport { Values } from 'jTConstants'\n\nclass NumberType extends CleaveType {\n\n  static priority = 1\n  static eval = (value) => (typeof value === 'number')\n  static defaultValue = (newType, schema, settings) => 0\n  \n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: true,\n        numeralThousandsGroupStyle: 'none',\n        stripLeadingZeroes: false,\n        numeralDecimalScale: 0,\n        ...(config || {}).cleave,\n      }\n    })\n  }\n\n  render = props => {\n    const { schema: { id, key, value, mode, matchType, keyType, parent, error } } = props\n\n    return Item({\n      id,\n      key,\n      value,\n      mode,\n      error,\n      type: matchType,\n      showLabel: true,\n      cleave: true,\n      isNumber: true,\n      keyEdit: !parent || !Array.isArray(parent.value),\n      keyType: keyType || 'text',\n      ...this.getActions(mode)\n    })\n  }\n  \n}\n\nexport default NumberType","import NumberType from '../number'\nimport { Item } from '../../../components'\n\nclass FloatType extends NumberType {\n\n  static priority = 2\n  static defaultValue = 0.0\n  static eval = (value) => (\n    typeof value === 'number' &&\n      Number(value) === value && \n      value % 1 !== 0\n  )\n\n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: true,\n        stripLeadingZeroes: false,\n        numeralThousandsGroupStyle: 'none',\n        numeralDecimalScale: 8,\n        ...(config || {}).cleave,\n      }\n    })\n  }\n\n  render = props => {\n    const { schema: { id, key, value, mode, matchType, keyType, parent, error } } = props\n    return Item({\n      id,\n      key,\n      value,\n      mode,\n      error,\n      type: matchType,\n      showLabel: true,\n      cleave: true,\n      isNumber: true,\n      keyEdit: !parent || !Array.isArray(parent.value),\n      keyType: keyType || 'text',\n      ...this.getActions(mode)\n    })\n  }\n\n}\n\nexport default FloatType","import NumberType from '../number'\nimport { Item } from '../../../components'\n\nclass MoneyType extends NumberType {\n\n  static priority = 2\n  static defaultValue = '$0'\n  static eval = value => {\n    return typeof value === 'string' && value.indexOf('$') !== -1\n  }\n  \n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: true,\n        delimiter: ',',\n        stripLeadingZeroes: true,\n        numeralDecimalScale: 2,\n        prefix: '$',\n        noImmediatePrefix: true,\n        ...(config || {}).cleave,\n      }\n    })\n  }\n\n  render = props => {\n    const { schema: { id, key, value, mode, matchType, keyType, parent, error } } = props\n    return Item({\n      id,\n      key,\n      value,\n      mode,\n      error,\n      type: matchType,\n      showLabel: true,\n      cleave: true,\n      keyEdit: !parent || !Array.isArray(parent.value),\n      keyType: keyType || 'text',\n      ...this.getActions(mode)\n    })\n  }\n\n}\n\nexport default MoneyType","import NumberType from '../number'\nimport { Item } from '../../../components'\n\nclass PercentType extends NumberType {\n  \n  static priority = 2\n  static defaultValue = '%0'\n  static eval = value => {\n    return typeof value === 'string' && value.indexOf('%') !== -1\n  }\n\n\n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: true,\n        numeralThousandsGroupStyle: 'none',\n        stripLeadingZeroes: false,\n        numeralDecimalScale: 2,\n        prefix: '%',\n        noImmediatePrefix: true,\n        ...(config || {}).cleave,\n      }\n    })\n  }\n\n  render = props => {\n    const { schema: { id, key, value, mode, matchType, keyType, parent, error } } = props\n    return Item({\n      id,\n      key,\n      value,\n      mode,\n      error,\n      type: matchType,\n      showLabel: true,\n      cleave: true,\n      keyEdit: !parent || !Array.isArray(parent.value),\n      keyType: keyType || 'text',\n      ...this.getActions(mode)\n    })\n  }\n\n}\n\nexport default PercentType","import BaseType from '../base'\nimport Cleave from 'cleave.js'\nimport { clearObj } from 'jTUtils'\nimport { Values, Schema } from 'jTConstants'\n\nconst getCleaveEl = (Editor, id) => {\n  const schema = Editor.schema(id)\n  return schema &&\n    schema.component &&\n    schema.component.getElementsByClassName(Values.CLEAVE_CLS)[0]\n}\n\nclass CleaveType extends BaseType {\n\n  constructor(config){\n    super(config)\n    this.cleaveOpts = {\n      onValueChanged: this.onCleaveChange,\n      ...config.cleave,\n    }\n  }\n  \n  onCleaveChange = (e, Editor) => {\n    // Sometimes this method gets called before the cleave is initialized\n    // So if no cleave, but return \n    if(!this.cleave) return\n    // If there is no cleave element, then just return\n    // this method should never have been called\n    if(!this.cleave.element)\n      return console.warn(`Called onCleaveChange but no cleave element exists`, this)\n\n    const update = {\n      value: e.target.rawValue,\n      key: this.cleave.element.getAttribute(Values.DATA_SCHEMA_KEY),\n      original: this.original.value\n    }\n\n    // Check if the input should be a number\n    if(this.cleave.element.classList.contains(Values.NUMBER_CLS)){\n      const numVal = Number(update.value)\n      // If it's a valid number use that instead\n      !isNaN(numVal) && (update.value = numVal)\n    }\n\n    // Ensure we have a valid key and value, and there was an update\n    if(\n      (update.value === undefined || update.key === undefined) ||\n      (this.original[update.key] && this.original[update.key] === update.value)\n    ) return\n\n    this.config.expandOnChange !== false &&\n      this.setWidth(getCleaveEl(Editor, this.original.id))\n\n    return this.original.value !== update.value &&\n      this.userEvents.onChange(e, update, this.original.id, Editor) !== false &&\n      (this.updated.value = update.value)\n  }\n\n  checkCleave = (schema, domNode) => {\n    if(domNode.classList && domNode.classList.contains(Values.CLEAVE_CLS)){\n      // Set the onValueChanged cb here, so we get access to the injected Editor\n      this.cleaveOpts.onValueChanged = this.onCleaveChange\n      // If a cleave instance already exists, clear it out\n      this.cleave && this.clearCleave()\n      // Create a new cleave instance, with the current domNode\n      this.cleave = new Cleave(domNode, this.cleaveOpts)\n      // Set the initial cleave value\n      this.cleave.setRawValue(schema.value)\n      return true\n    }\n  }\n  \n  buildEvents = (schema, domNode) => (\n    domNode && Array\n      .from(domNode.getElementsByTagName('input'))\n      .map(input => {\n        // Checks if it has the cleave class\n        // Catches changes for the key input\n        !this.cleave && this.checkCleave(schema, input)\n          ? (domNode.oninput = undefined)\n          : (domNode.oninput = this.onChange)\n\n        this.config.expandOnChange !== false && this.setWidth(input)\n      })\n  )\n\n  clearCleave = (rmOpts=true) => {\n    if(!this.cleave) return\n    this.cleave.destroy()\n    this.cleave = undefined\n    rmOpts && clearObj(this.cleaveOpts)\n  }\n\n  componentDidUpdate = (props, Editor) => {\n    const { schema } = props\n    // If not in edit mode, clear out cleave\n    if(schema.mode !== Schema.MODES.EDIT) this.clearCleave(false)\n    // If in edit mode, and no cleave, add the cleave to the component\n    else if(!this.cleave) this.buildEvents(schema, schema.component)\n    // Else update the cleave to the current raw value\n    else this.cleave.setRawValue(schema.value)\n    \n    const { parent, instance, component, ...original } = schema\n    // Update original with current schema\n    this.original = original\n    // Clear out the updated, because we just updated\n    this.updated && clearObj(this.updated)\n  }\n  \n  componentWillUnmount = (Editor) => {\n    // Set to undefined, because when the instance gets remove, we don't want it \n    // to remove the value; it's a ref to the actual value in the tree\n    this.original.value = undefined\n    this.clearCleave()\n  }\n\n}\n\nexport default CleaveType"],"sourceRoot":""}