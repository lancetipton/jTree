{"version":3,"sources":["webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/index.js","webpack://[name]/./src/scripts/modules/types/definitions/string/string.js","webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/card.js","webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/color.js","webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/email.js","webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/phone.js","webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/url.js","webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/uuid.js","webpack://[name]/./src/scripts/modules/types/definitions/cleave/index.js"],"names":["__webpack_require__","r","__webpack_exports__","_card__WEBPACK_IMPORTED_MODULE_0__","d","_color__WEBPACK_IMPORTED_MODULE_1__","_email__WEBPACK_IMPORTED_MODULE_2__","_phone__WEBPACK_IMPORTED_MODULE_3__","_url__WEBPACK_IMPORTED_MODULE_4__","_uuid__WEBPACK_IMPORTED_MODULE_5__","StringType","config","_this","_classCallCheck","this","_getPrototypeOf","call","_objectSpread","cleave","numeral","stripLeadingZeroes","_defineProperty","_assertThisInitialized","props","_props$schema","schema","id","key","value","mode","matchType","keyType","parent","error","Item","type","showLabel","keyEdit","Array","isArray","getActions","CleaveType","newType","settings","cardValidate","visa","match","master","jcb","discover","diners","amx","CardType","creditCard","validCard","Object","keys","entries","_ref","_ref2","_slicedToArray","test","cardnumber","getdigits","digits","exec","push","parseInt","sum","alt","map","digit","luhn","ColorType","_possibleConstructorReturn","Boolean","EmailType","indexOf","PhoneType","replace","UrlType","UuidType","delimiter","lowercase","blocks","uppercase","getCleaveEl","Editor","component","getElementsByClassName","Values","CLEAVE_CLS","e","element","console","warn","update","target","rawValue","getAttribute","DATA_SCHEMA_KEY","original","classList","contains","NUMBER_CLS","numVal","Number","isNaN","undefined","expandOnChange","setWidth","userEvents","onChange","updated","domNode","cleaveOpts","onValueChanged","onCleaveChange","clearCleave","Cleave","setRawValue","from","getElementsByTagName","input","checkCleave","oninput","rmOpts","arguments","length","destroy","clearObj","Schema","MODES","EDIT","buildEvents","instance","_objectWithoutProperties","BaseType"],"mappings":"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","file":"type-definitions-string-sub_types.min.js","sourcesContent":["import CardType from './card'\nimport ColorType from './color'\nimport EmailType from './email'\nimport PhoneType from './phone'\nimport UrlType from './url'\nimport UuidType from './uuid'\n\nexport {\n  CardType,\n  ColorType,\n  EmailType,\n  PhoneType,\n  UrlType,\n  UuidType\n}","import CleaveType from '../cleave'\nimport { Item } from '../../components'\nimport { Values, Schema } from 'jTConstants'\n\nclass StringType extends CleaveType {\n\n  static priority = 1\n  static eval = (value) => (typeof value === 'string')\n  static defaultValue = (newType, schema, settings) => ''\n  \n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: false,\n        stripLeadingZeroes: false,\n        ...(config && config.cleave || {}),\n      }\n    })\n  }\n\n  render = props => {\n    const { schema: { id, key, value, mode, matchType, keyType, parent, error } } = props\n    return Item({\n      id,\n      key,\n      value,\n      mode,\n      error,\n      type: matchType,\n      showLabel: true,\n      keyEdit: !parent || !Array.isArray(parent.value),\n      keyType: keyType || 'text',\n      ...this.getActions(mode)\n    })\n  }\n\n}\n\nexport default StringType","import StringType from '../string'\nimport { Item } from '../../../components'\n\nconst luhn = cardnumber => {\n  const getdigits = /\\d/g\n  const digits = []\n  while (match = getdigits.exec(cardnumber))\n    digits.push(parseInt(match[0], 10))\n\n  let sum = 0\n  let alt = false\n  digits.map(digit => {\n    if (alt) {\n      digit *= 2\n      if (digit > 9) digit -= 9\n    }\n\n    sum += digit\n    alt = !alt\n  })\n\n  return sum % 10 == 0\n    ? true\n    : false\n}\n\nconst cardValidate = {\n  visa: value => value.match(/^(?:4[0-9]{12}(?:[0-9]{3})?)$/),\n  master: value => value.match(/^(?:5[1-5][0-9]{14})$/),\n  jcb: value => value.match(/^(?:(?:2131|1800|35\\d{3})\\d{11})$/),\n  discover: value => value.match(/^(?:6(?:011|5[0-9][0-9])[0-9]{12})$/),\n  diners: value => value.match(/^(?:3(?:0[0-5]|[68][0-9])[0-9]{11})$/),\n  amx: value => value.match(/^(?:3[47][0-9]{13})$/),\n}\n\nclass CardType extends StringType {\n\n  static priority = 2\n  static defaultValue = ''\n  // static allowEmptyValue = ''\n  static eval = value => {\n    let validCard\n    Object\n      .keys(cardValidate)\n      .entries(([ type, test ]) => {\n        if(!validCard && test(value)) validCard = type\n      })\n\n    return validCard\n      ? luhn(value)\n      : false\n  }\n\n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        creditCard: true,\n        ...(config && config.cleave || {}),\n      }\n    })\n  }\n  \n  render = props => {\n    const { schema: { id, key, value, mode, matchType, keyType, parent, error } } = props\n    return Item({\n      id,\n      key,\n      value,\n      mode,\n      error,\n      type: matchType,\n      showLabel: true,\n      cleave: true,\n      keyEdit: !parent || !Array.isArray(parent.value),\n      keyType: keyType || 'text',\n      ...this.getActions(mode)\n    })\n  }\n\n}\n\nexport default CardType","import StringType from '../string'\n\nclass ColorType extends StringType {\n\n  static priority = 2\n  static defaultValue = '#FFFFFF'\n  static eval = value => {\n    return  Boolean(/^#(?:(?:[A-F0-9]{2}){3,4}|[A-F0-9]{3})$/i.test(value))\n  }\n  constructor(config){\n    super(config)\n  }\n\n\n}\n\nexport default ColorType","import StringType from '../string'\n\nclass EmailType extends StringType {\n\n  static priority = 2\n  static defaultValue = ''\n  static allowEmptyValue = ''\n  static eval = value => {\n    if (\n      !value ||\n      typeof value !== 'string' ||\n      value.indexOf('@') === -1 ||\n      value.indexOf('.') === -1\n    )\n      return false\n\n    const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n    return Boolean(regex.test(value))\n  }\n\n  constructor(config){\n    super(config)\n  }\n\n\n}\n\nexport default EmailType","import StringType from '../string'\n\nclass PhoneType extends StringType {\n\n  static priority = 2\n  static defaultValue = ''\n  static allowEmptyValue = ''\n  static eval = value => {\n    if (!value || typeof value !== 'string') return false\n    const regex = /^[2-9]\\d{2}[2-9]\\d{2}\\d{4}$/\n    return Boolean(regex.test(value.replace(/\\D/g, '')))\n  }\n\n  constructor(config){\n    super(config)\n  }\n\n\n}\n\nexport default PhoneType","import StringType from '../string'\n\nclass UrlType extends StringType {\n\n  static priority = 2\n  static defaultValue = ''\n  static allowEmptyValue = ''\n  static eval = value => {\n    const regex = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/\n    return Boolean(regex.test(value))\n  }\n  \n  constructor(config){\n    super(config)\n  }\n\n\n}\n\nexport default UrlType","import StringType from '../string'\nimport { Item } from '../../../components'\nimport { Values, Schema } from 'jTConstants'\n\nclass UuidType extends StringType {\n\n  static priority = 2\n  static defaultValue = ''\n  static allowEmptyValue = ''\n  static eval = value => {\n    if (!value || typeof value !== 'string') return false\n    const regex = /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n    return regex.test(value)\n  }\n\n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: false,\n        delimiter: '-',\n        lowercase: true,\n        blocks: [8, 4, 3, 3, 12],\n        uppercase: false,\n        stripLeadingZeroes: false,\n        ...(config && config.cleave || {}),\n      }\n    })\n  }\n\n}\n\nexport default UuidType","import BaseType from '../base'\nimport Cleave from 'cleave.js'\nimport { clearObj } from 'jTUtils'\nimport { Values, Schema } from 'jTConstants'\n\nconst getCleaveEl = (Editor, id) => {\n  const schema = Editor.schema(id)\n  return schema &&\n    schema.component &&\n    schema.component.getElementsByClassName(Values.CLEAVE_CLS)[0]\n}\n\nclass CleaveType extends BaseType {\n\n  constructor(config){\n    super(config)\n    this.cleaveOpts = {\n      onValueChanged: this.onCleaveChange,\n      ...config.cleave,\n    }\n  }\n  \n  onCleaveChange = (e, Editor) => {\n    // Sometimes this method gets called before the cleave is initialized\n    // So if no cleave, but return \n    if(!this.cleave) return\n    // If there is no cleave element, then just return\n    // this method should never have been called\n    if(!this.cleave.element)\n      return console.warn(`Called onCleaveChange but no cleave element exists`, this)\n\n    const update = {\n      value: e.target.rawValue,\n      key: this.cleave.element.getAttribute(Values.DATA_SCHEMA_KEY),\n      original: this.original.value\n    }\n\n    // Check if the input should be a number\n    if(this.cleave.element.classList.contains(Values.NUMBER_CLS)){\n      const numVal = Number(update.value)\n      // If it's a valid number use that instead\n      !isNaN(numVal) && (update.value = numVal)\n    }\n\n    // Ensure we have a valid key and value, and there was an update\n    if(\n      (update.value === undefined || update.key === undefined) ||\n      (this.original[update.key] && this.original[update.key] === update.value)\n    ) return\n\n    this.config.expandOnChange !== false &&\n      this.setWidth(getCleaveEl(Editor, this.original.id))\n\n    return this.original.value !== update.value &&\n      this.userEvents.onChange(e, update, this.original.id, Editor) !== false &&\n      (this.updated.value = update.value)\n  }\n\n  checkCleave = (schema, domNode) => {\n    if(domNode.classList && domNode.classList.contains(Values.CLEAVE_CLS)){\n      // Set the onValueChanged cb here, so we get access to the injected Editor\n      this.cleaveOpts.onValueChanged = this.onCleaveChange\n      // If a cleave instance already exists, clear it out\n      this.cleave && this.clearCleave()\n      // Create a new cleave instance, with the current domNode\n      this.cleave = new Cleave(domNode, this.cleaveOpts)\n      // Set the initial cleave value\n      this.cleave.setRawValue(schema.value)\n      return true\n    }\n  }\n  \n  buildEvents = (schema, domNode) => (\n    domNode && Array\n      .from(domNode.getElementsByTagName('input'))\n      .map(input => {\n        // Checks if it has the cleave class\n        // Catches changes for the key input\n        !this.cleave && this.checkCleave(schema, input)\n          ? (domNode.oninput = undefined)\n          : (domNode.oninput = this.onChange)\n\n        this.config.expandOnChange !== false && this.setWidth(input)\n      })\n  )\n\n  clearCleave = (rmOpts=true) => {\n    if(!this.cleave) return\n    this.cleave.destroy()\n    this.cleave = undefined\n    rmOpts && clearObj(this.cleaveOpts)\n  }\n\n  componentDidUpdate = (props, Editor) => {\n    const { schema } = props\n    // If not in edit mode, clear out cleave\n    if(schema.mode !== Schema.MODES.EDIT) this.clearCleave(false)\n    // If in edit mode, and no cleave, add the cleave to the component\n    else if(!this.cleave) this.buildEvents(schema, schema.component)\n    // Else update the cleave to the current raw value\n    else this.cleave.setRawValue(schema.value)\n    \n    const { parent, instance, component, ...original } = schema\n    // Update original with current schema\n    this.original = original\n    // Clear out the updated, because we just updated\n    this.updated && clearObj(this.updated)\n  }\n  \n  componentWillUnmount = (Editor) => {\n    // Set to undefined, because when the instance gets remove, we don't want it \n    // to remove the value; it's a ref to the actual value in the tree\n    this.original.value = undefined\n    this.clearCleave()\n  }\n\n}\n\nexport default CleaveType"],"sourceRoot":""}