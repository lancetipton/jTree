(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("markdown", [], factory);
	else if(typeof exports === 'object')
		exports["markdown"] = factory();
	else
		root["markdown"] = factory();
})((typeof self !== 'undefined' ? self : this), function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/example/markdown.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./README.md":
/*!*******************!*\
  !*** ./README.md ***!
  \*******************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# jTree ( JS / JSON Object Editor )\n\n## Install\n\n\n## Type Priority\n  **Use Case**\n    * In matching value to `Type Class Instance` and more then one match is found\n      * The `Type Class Instance` with higher priority will be used\n      * If the priority is the same\n        * If the matches extend the same `Parent Type Class`\n          * If `Parent Type Class` has a `matchHelper` method\n            * It will be called\n          * If `Parent Type Class` does not have a `matchHelper` method\n            * The `Base Parent Type Class` `matchHelper` method will be called\n  **Definition**\n    * Private variable of a `Type Class Instance`\n    * Can be set using method `TypeClassInstance.setPriority`\n      ```js\n        const myStrType = new StringType()\n        myStrType.setPriority(5)\n      ```\n      * Can be set when creating a new instance of a `Type Class` \n        * When creating a new instance, pass an object constructor with the updated priority\n          ```js\n            const myStrType = new StringType({\n              priority: <Number>\n            })\n          ```\n    * Can be accessed using method `TypeClassInstance.getPriority`\n      ```js\n        const myStrType = new StringType()\n        const strPriority = myStrType.getPriority()\n      ```\n    * Sets priority for **ONLY** the `Instance`, not the `Type Class`\n    * If no priority set, uses the default `private static priority` for the `Type Class`\n");

/***/ }),

/***/ "./src/example/markdown.js":
/*!*********************************!*\
  !*** ./src/example/markdown.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _README_md__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../README.md */ "./README.md");

var iconMap = {
  install: '<i class="fas fa-clipboard-check"></i>',
  dependencies: '<i class="fas fa-plug"></i>',
  features: '<i class="fab fa-font-awesome-flag"></i>',
  theme: '<i class="fas fa-palette"></i>',
  tools: '<i class="fas fa-tools"></i>',
  'custom-tools': '<i class="fas fa-hammer"></i>',
  settings: '<i class="fas fa-magic"></i>',
  styles: '<i class="fas fa-paint-brush"></i>',
  'tipdig-it-api': '<i class="fas fa-atom"></i>',
  'editor-api': '<i class="fas fa-atom"></i>',
  'full-example': '<i class="fas fa-book-open"></i>'
};
var headerFilter = ['editor-api', 'custom-tools', 'dependencies'];

var addNavItem = function addNavItem(navList, element) {
  var linkWrp = document.createElement('li');
  var link = document.createElement('a');
  var cleaned = element.innerText.toLowerCase().replace(/ /g, '-');
  if (headerFilter.indexOf(cleaned) !== -1) return;
  element.id = "tipdig-nav-".concat(cleaned);
  link.setAttribute('href', "#".concat(element.id));
  link.innerHTML = "".concat(iconMap[cleaned] || '', "\n").concat(element.innerText);
  link.className = 'tipdig-link';
  linkWrp.appendChild(link);
  linkWrp.className = 'tipdig-link-wrapper';
  navList.appendChild(linkWrp);
};

document.addEventListener('DOMContentLoaded', function () {// const compHW = document.getElementById('markdown-content')
  // const markDown = window.markdownit({
  //   html: false,
  //   xhtmlOut: false,
  //   breaks: false,
  //   langPrefix: 'language-',
  //   linkify: false,
  //   typographer: false,
  //   quotes: '“”‘’',
  //   highlight: () => ('')
  // })
  // compHW.innerHTML = markDown.render(ReadMe)
  // Array.from(document.getElementsByTagName('a'))
  //   .map(link => {
  //     link.setAttribute('target', '_blank')
  //   })
  // const navList = document.getElementById('nav-list')
  // navList && Array.from(compHW.getElementsByTagName('h2'))
  //   .map(element => {
  //     if (!element.id) addNavItem(navList, element)
  //   })
});

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,