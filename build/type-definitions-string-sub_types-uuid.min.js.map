{"version":3,"sources":["webpack://[name]/./src/scripts/modules/types/definitions/string/string.js","webpack://[name]/./src/scripts/modules/types/definitions/string/sub_types/uuid.js","webpack://[name]/./src/scripts/modules/types/definitions/cleave/index.js"],"names":["StringType","config","_this","_classCallCheck","this","_getPrototypeOf","call","_objectSpread","cleave","numeral","stripLeadingZeroes","_defineProperty","_assertThisInitialized","props","_props$schema","schema","id","key","value","mode","matchType","keyType","parent","error","Item","type","showLabel","keyEdit","Array","isArray","getActions","CleaveType","newType","settings","UuidType","_possibleConstructorReturn","delimiter","lowercase","blocks","uppercase","test","getCleaveEl","Editor","component","getElementsByClassName","Values","CLEAVE_CLS","e","element","console","warn","update","target","rawValue","getAttribute","DATA_SCHEMA_KEY","original","classList","contains","NUMBER_CLS","numVal","Number","isNaN","undefined","expandOnChange","setWidth","userEvents","onChange","updated","domNode","cleaveOpts","onValueChanged","onCleaveChange","clearCleave","Cleave","setRawValue","from","getElementsByTagName","map","input","checkCleave","oninput","rmOpts","arguments","length","destroy","clearObj","Schema","MODES","EDIT","buildEvents","instance","_objectWithoutProperties","BaseType"],"mappings":"msCAIMA,cAMJ,SAAAA,EAAYC,GAAO,IAAAC,MAAA,mGAAAC,CAAAC,KAAAJ,KACjBI,OAAAC,EAAAL,GAAAM,KAAAF,KAAAG,EAAA,GACKN,EADL,CAEEO,OAAMD,EAAA,CACJE,SAAS,EACTC,oBAAoB,GAChBT,GAAUA,EAAOO,QAAU,OALnCN,mDADiBS,EAAAC,EAAAV,GAAA,SAWV,SAAAW,GAAS,IAAAC,EACgED,EAAxEE,OAAUC,EADFF,EACEE,GAAIC,EADNH,EACMG,IAAKC,EADXJ,EACWI,MAAOC,EADlBL,EACkBK,KAAMC,EADxBN,EACwBM,UAAWC,EADnCP,EACmCO,QAASC,EAD5CR,EAC4CQ,OAAQC,EADpDT,EACoDS,MACpE,OAAOC,eAAIjB,EAAA,CACTS,KACAC,MACAC,QACAC,OACAI,QACAE,KAAML,EACNM,WAAW,EACXC,SAAUL,IAAWM,MAAMC,QAAQP,EAAOJ,OAC1CG,QAASA,GAAW,QACjBnB,EAAK4B,WAAWX,OAvBJjB,8OANI6B,qBAAnB/B,aAEc,KAFdA,SAGU,SAACkB,GAAD,MAA6B,iBAAVA,MAH7BlB,iBAIkB,SAACgC,EAASjB,EAAQkB,GAAlB,MAA+B,KA+BxCjC,2oCCnCTkC,cAWJ,SAAAA,EAAYjC,GAAO,mGAAAE,CAAAC,KAAA8B,GAAAC,EAAA/B,KAAAC,EAAA6B,GAAA5B,KAAAF,KAAAG,EAAA,GAEZN,EAFY,CAGfO,OAAMD,EAAA,CACJE,SAAS,EACT2B,UAAW,IACXC,WAAW,EACXC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,IACrBC,WAAW,EACX7B,oBAAoB,GAChBT,GAAUA,EAAOO,QAAU,oPArBhBR,qBAAjBkC,aAEc,KAFdA,iBAGkB,MAHlBA,oBAIqB,MAJrBA,SAKU,SAAAhB,GACZ,IAAKA,GAA0B,iBAAVA,EAAoB,OAAO,EAEhD,MADc,2EACDsB,KAAKtB,KAoBPgB,uoCC3Bf,IAAMO,EAAc,SAACC,EAAQ1B,GAC3B,IAAMD,EAAS2B,EAAO3B,OAAOC,GAC7B,OAAOD,GACLA,EAAO4B,WACP5B,EAAO4B,UAAUC,uBAAuBC,IAAOC,YAAY,IAGzDf,cAEJ,SAAAA,EAAY9B,GAAO,IAAAC,MAAA,mGAAAC,CAAAC,KAAA2B,KACjB3B,OAAAC,EAAA0B,GAAAzB,KAAAF,KAAMH,GAANC,mDADiBS,EAAAC,EAAAV,GAAA,iBAQF,SAAC6C,EAAGL,GAGnB,GAAIxC,EAAKM,OAAT,CAGA,IAAIN,EAAKM,OAAOwC,QACd,OAAOC,QAAQC,KAAR,qDAAAtC,EAAAV,IAET,IAAMiD,EAAS,CACbjC,MAAO6B,EAAEK,OAAOC,SAChBpC,IAAKf,EAAKM,OAAOwC,QAAQM,aAAaT,IAAOU,iBAC7CC,SAAUtD,EAAKsD,SAAStC,OAI1B,GAAGhB,EAAKM,OAAOwC,QAAQS,UAAUC,SAASb,IAAOc,YAAY,CAC3D,IAAMC,EAASC,OAAOV,EAAOjC,QAE5B4C,MAAMF,KAAYT,EAAOjC,MAAQ0C,GAIpC,UACoBG,IAAjBZ,EAAOjC,YAAsC6C,IAAfZ,EAAOlC,KACrCf,EAAKsD,SAASL,EAAOlC,MAAQf,EAAKsD,SAASL,EAAOlC,OAASkC,EAAOjC,OAMrE,OAH+B,IAA/BhB,EAAKD,OAAO+D,gBACV9D,EAAK+D,SAASxB,EAAYC,EAAQxC,EAAKsD,SAASxC,KAE3Cd,EAAKsD,SAAStC,QAAUiC,EAAOjC,QAC8B,IAAlEhB,EAAKgE,WAAWC,SAASpB,EAAGI,EAAQjD,EAAKsD,SAASxC,GAAI0B,KACrDxC,EAAKkE,QAAQlD,MAAQiC,EAAOjC,UAzCdP,EAAAC,EAAAV,GAAA,cA4CL,SAACa,EAAQsD,GACrB,GAAGA,EAAQZ,WAAaY,EAAQZ,UAAUC,SAASb,IAAOC,YASxD,OAPA5C,EAAKoE,WAAWC,eAAiBrE,EAAKsE,eAEtCtE,EAAKM,QAAUN,EAAKuE,cAEpBvE,EAAKM,OAAS,IAAIkE,IAAOL,EAASnE,EAAKoE,YAEvCpE,EAAKM,OAAOmE,YAAY5D,EAAOG,QACxB,IAtDQP,EAAAC,EAAAV,GAAA,cA0DL,SAACa,EAAQsD,GAAT,OACZA,GAAWzC,MACRgD,KAAKP,EAAQQ,qBAAqB,UAClCC,IAAI,SAAAC,IAGF7E,EAAKM,QAAUN,EAAK8E,YAAYjE,EAAQgE,GACpCV,EAAQY,aAAUlB,EAClBM,EAAQY,QAAU/E,EAAKiE,UAEG,IAA/BjE,EAAKD,OAAO+D,gBAA4B9D,EAAK+D,SAASc,OApEzCpE,EAAAC,EAAAV,GAAA,cAwEL,WAAiB,IAAhBgF,IAAgBC,UAAAC,OAAA,QAAArB,IAAAoB,UAAA,KAAAA,UAAA,GACzBjF,EAAKM,SACTN,EAAKM,OAAO6E,UACZnF,EAAKM,YAASuD,EACdmB,GAAUI,YAASpF,EAAKoE,eA5EP3D,EAAAC,EAAAV,GAAA,qBA+EE,SAACW,EAAO6B,GAAW,IAC9B3B,EAAWF,EAAXE,OAELA,EAAOI,OAASoE,IAAOC,MAAMC,KAAMvF,EAAKuE,aAAY,GAE9CvE,EAAKM,OAETN,EAAKM,OAAOmE,YAAY5D,EAAOG,OAFdhB,EAAKwF,YAAY3E,EAAQA,EAAO4B,WAID5B,EAA7CO,OAA6CP,EAArC4E,SAAqC5E,EAA3B4B,UATY,IASEa,EATFoC,EASe7E,EATf,mCAWtCb,EAAKsD,SAAWA,EAEhBtD,EAAKkE,SAAWkB,YAASpF,EAAKkE,WA5FbzD,EAAAC,EAAAV,GAAA,uBA+FI,SAACwC,GAGtBxC,EAAKsD,SAAStC,WAAQ6C,EACtB7D,EAAKuE,gBAjGLvE,EAAKoE,6UAAL/D,CAAA,CACEgE,eAAgBrE,EAAKsE,gBAClBvE,EAAOO,QAJKN,8OAFI2F,mBA0GV9D","file":"type-definitions-string-sub_types-uuid.min.js","sourcesContent":["import CleaveType from '../cleave'\nimport { Item } from '../../components'\nimport { Values, Schema } from 'jTConstants'\n\nclass StringType extends CleaveType {\n\n  static priority = 1\n  static eval = (value) => (typeof value === 'string')\n  static defaultValue = (newType, schema, settings) => ''\n  \n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: false,\n        stripLeadingZeroes: false,\n        ...(config && config.cleave || {}),\n      }\n    })\n  }\n\n  render = props => {\n    const { schema: { id, key, value, mode, matchType, keyType, parent, error } } = props\n    return Item({\n      id,\n      key,\n      value,\n      mode,\n      error,\n      type: matchType,\n      showLabel: true,\n      keyEdit: !parent || !Array.isArray(parent.value),\n      keyType: keyType || 'text',\n      ...this.getActions(mode)\n    })\n  }\n\n}\n\nexport default StringType","import StringType from '../string'\nimport { Item } from '../../../components'\nimport { Values, Schema } from 'jTConstants'\n\nclass UuidType extends StringType {\n\n  static priority = 2\n  static defaultValue = ''\n  static allowEmptyValue = ''\n  static eval = value => {\n    if (!value || typeof value !== 'string') return false\n    const regex = /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n    return regex.test(value)\n  }\n\n  constructor(config){\n    super({\n      ...config,\n      cleave: {\n        numeral: false,\n        delimiter: '-',\n        lowercase: true,\n        blocks: [8, 4, 3, 3, 12],\n        uppercase: false,\n        stripLeadingZeroes: false,\n        ...(config && config.cleave || {}),\n      }\n    })\n  }\n\n}\n\nexport default UuidType","import BaseType from '../base'\nimport Cleave from 'cleave.js'\nimport { clearObj } from 'jTUtils'\nimport { Values, Schema } from 'jTConstants'\n\nconst getCleaveEl = (Editor, id) => {\n  const schema = Editor.schema(id)\n  return schema &&\n    schema.component &&\n    schema.component.getElementsByClassName(Values.CLEAVE_CLS)[0]\n}\n\nclass CleaveType extends BaseType {\n\n  constructor(config){\n    super(config)\n    this.cleaveOpts = {\n      onValueChanged: this.onCleaveChange,\n      ...config.cleave,\n    }\n  }\n  \n  onCleaveChange = (e, Editor) => {\n    // Sometimes this method gets called before the cleave is initialized\n    // So if no cleave, but return \n    if(!this.cleave) return\n    // If there is no cleave element, then just return\n    // this method should never have been called\n    if(!this.cleave.element)\n      return console.warn(`Called onCleaveChange but no cleave element exists`, this)\n\n    const update = {\n      value: e.target.rawValue,\n      key: this.cleave.element.getAttribute(Values.DATA_SCHEMA_KEY),\n      original: this.original.value\n    }\n\n    // Check if the input should be a number\n    if(this.cleave.element.classList.contains(Values.NUMBER_CLS)){\n      const numVal = Number(update.value)\n      // If it's a valid number use that instead\n      !isNaN(numVal) && (update.value = numVal)\n    }\n\n    // Ensure we have a valid key and value, and there was an update\n    if(\n      (update.value === undefined || update.key === undefined) ||\n      (this.original[update.key] && this.original[update.key] === update.value)\n    ) return\n\n    this.config.expandOnChange !== false &&\n      this.setWidth(getCleaveEl(Editor, this.original.id))\n\n    return this.original.value !== update.value &&\n      this.userEvents.onChange(e, update, this.original.id, Editor) !== false &&\n      (this.updated.value = update.value)\n  }\n\n  checkCleave = (schema, domNode) => {\n    if(domNode.classList && domNode.classList.contains(Values.CLEAVE_CLS)){\n      // Set the onValueChanged cb here, so we get access to the injected Editor\n      this.cleaveOpts.onValueChanged = this.onCleaveChange\n      // If a cleave instance already exists, clear it out\n      this.cleave && this.clearCleave()\n      // Create a new cleave instance, with the current domNode\n      this.cleave = new Cleave(domNode, this.cleaveOpts)\n      // Set the initial cleave value\n      this.cleave.setRawValue(schema.value)\n      return true\n    }\n  }\n  \n  buildEvents = (schema, domNode) => (\n    domNode && Array\n      .from(domNode.getElementsByTagName('input'))\n      .map(input => {\n        // Checks if it has the cleave class\n        // Catches changes for the key input\n        !this.cleave && this.checkCleave(schema, input)\n          ? (domNode.oninput = undefined)\n          : (domNode.oninput = this.onChange)\n\n        this.config.expandOnChange !== false && this.setWidth(input)\n      })\n  )\n\n  clearCleave = (rmOpts=true) => {\n    if(!this.cleave) return\n    this.cleave.destroy()\n    this.cleave = undefined\n    rmOpts && clearObj(this.cleaveOpts)\n  }\n\n  componentDidUpdate = (props, Editor) => {\n    const { schema } = props\n    // If not in edit mode, clear out cleave\n    if(schema.mode !== Schema.MODES.EDIT) this.clearCleave(false)\n    // If in edit mode, and no cleave, add the cleave to the component\n    else if(!this.cleave) this.buildEvents(schema, schema.component)\n    // Else update the cleave to the current raw value\n    else this.cleave.setRawValue(schema.value)\n    \n    const { parent, instance, component, ...original } = schema\n    // Update original with current schema\n    this.original = original\n    // Clear out the updated, because we just updated\n    this.updated && clearObj(this.updated)\n  }\n  \n  componentWillUnmount = (Editor) => {\n    // Set to undefined, because when the instance gets remove, we don't want it \n    // to remove the value; it's a ref to the actual value in the tree\n    this.original.value = undefined\n    this.clearCleave()\n  }\n\n}\n\nexport default CleaveType"],"sourceRoot":""}